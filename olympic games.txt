#include <bits/stdc++.h>
using namespace std;

long query(long long n, vector <long long> cobol, vector <long long> pole, vector <long long> donut){
    vector <long long> temp;
    temp = cobol;
    sort (temp.begin(),temp.end(),greater <int> ());
    vector <long long> store;
    long long carry = 0;
    for (long long i=0; i<n; i++){
        for (long long j=0; j<n; j++){
            if (temp[i]==cobol[j]){
                store.push_back(carry + cobol[j] + pole[j] + donut [j]);
                carry += cobol[j];
                break;
            }
        }
    }
    sort(store.begin(),store.end(),greater<int>());
    return store[0];
}


int main() {
	long long n;
	cin>>n;
	vector <long long> cobol;
	vector <long long> pole;
	vector <long long> donut;
	for (long long i=0; i<n; i++){
	    long long a,b,c;
	    cin>>a>>b>>c;
	    cobol.push_back(a);
	    pole.push_back(b);
	    donut.push_back(c);
	}
	cout<<query(n,cobol,pole,donut);
	return 0;
}
/*
#include <bits/stdc++.h>
using namespace std;

long query(long long n, vector <long long> cobol, vector <long long> pole, vector <long long> donut){
    vector <long long> temp;
//    temp = cobol;
    for (long long i=0; i<n; i++)
    temp.push_back(cobol[i] + pole[i] + donut[i]);
    
    sort (temp.begin(),temp.end(),greater <int> ());
    vector <long long> store;
    long long carry = 0;
    for (long long i=0; i<n; i++){
        for (long long j=0; j<n; j++){
            long long sum = cobol[j] + pole[j] + donut[j];
            if (temp[i]==sum){
                store.push_back(carry + cobol[j] + pole[j] + donut [j]);
                carry += cobol[j];
                break;
            }
        }
    }
    sort(store.begin(),store.end(),greater<int>());
    return store[0];
}


int main() {
	long long n;
	cin>>n;
	vector <long long> cobol;
	vector <long long> pole;
	vector <long long> donut;
	for (long long i=0; i<n; i++){
	    long long a,b,c;
	    cin>>a>>b>>c;
	    cobol.push_back(a);
	    pole.push_back(b);
	    donut.push_back(c);
	}
	cout<<query(n,cobol,pole,donut);
	return 0;
}
*/ ANOTHER APPROACH